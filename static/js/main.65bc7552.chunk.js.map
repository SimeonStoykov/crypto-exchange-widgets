{"version":3,"sources":["components/Ticker/Ticker.js","utils.js","components/OrderBook/OrderBook.js","components/Trade/Trade.js","App.js","actions/appActions.js","actionTypes.js","actions/tickerActions.js","actions/orderBookActions.js","actions/tradeActions.js","reducers/appReducer.js","reducers/tickerReducer.js","reducers/orderBookReducer.js","reducers/tradeReducer.js","store.js","index.js"],"names":["TICKER_PAIRS","Ticker","webSocket","this","props","addEventListener","forEach","pair","send","JSON","stringify","event","channel","symbol","concat","generateTickerSubscribeMsg","_this","Object","keys","tickersData","length","react_default","a","createElement","Fragment","className","map","currentTickerData","coin","substr","currency","dailyChangeClass","dailyChange","dailyChangePercent","Math","abs","round","key","lastPrice","volume","getTickers","Component","connect","state","tickerReducer","get","toJS","OrderBook","msg","prec","freq","orderBookData","bids","el","index","count","amount","price","asks","getBids","getAsks","orderBookReducer","Trade","tradesData","tr","tradeTime","Date","milliseconds","utcTradeTime","getTime","getTimezoneOffset","seconds","getSeconds","minutes","getMinutes","hour","getHours","amountRowClass","amountToDisplay","id","toFixed","getTrades","tradeReducer","WebSocket","App","data","parse","chanId","setChannelInfo","channelInfo","type","Array","isArray","currentChannelId","mainData","currentChannel","channelsInfo","setTickerData","tickerInfo","initialData","i","currentBookData","push","setOrderBookData","updatedPart","updateOrderBookData","updatedData","partToRemoveFrom","removeOrderBookData","removedPrice","trades","currentTrade","setTradeData","msgType","tradeData","updateTradeData","components_Ticker_Ticker","components_Trade_Trade","components_OrderBook_OrderBook","appReducer","dispatch","initialState","fromJS","reducers","combineReducers","arguments","undefined","action","_action$data","setIn","updatedPrice","newOrderBookData","objectSpread","currentData","existingPriceIndex","findIndex","assign","pop","sort","b","set","_action$data2","newData","toConsumableArray","splice","currentTradesData","newTradesData","existingTradeIndex","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.65bc7552.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './Ticker.css';\r\n\r\nimport {\r\n    generateTickerSubscribeMsg\r\n} from '../../utils';\r\n\r\nconst TICKER_PAIRS = ['BTCUSD', 'ETHUSD', 'BCHUSD', 'XRPUSD', 'EOSUSD', 'LTCUSD', 'NEOUSD', 'XMRUSD', 'IOTUSD', 'OMGUSD'];\r\n\r\nclass Ticker extends Component {\r\n    componentDidMount() {\r\n        const { webSocket } = this.props;\r\n\r\n        webSocket.addEventListener('open', () => {\r\n            TICKER_PAIRS.forEach(pair => {\r\n                webSocket.send(generateTickerSubscribeMsg(pair));\r\n            });\r\n        });\r\n    }\r\n\r\n    getTickers() {\r\n        if (Object.keys(this.props.tickersData).length > 0) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div className=\"ticker-header-wrapper\">\r\n                        <div className=\"ticker-header-row\">NAME</div>\r\n                        <div className=\"ticker-header-row\">LAST</div>\r\n                        <div className=\"ticker-header-row\">24H</div>\r\n                        <div className=\"ticker-header-row\">VOL</div>\r\n                    </div>\r\n\r\n                    {\r\n                        Object.keys(this.props.tickersData).map((pair) => {\r\n                            let currentTickerData = this.props.tickersData[pair];\r\n                            let coin = pair.substr(0, 3);\r\n                            let currency = pair.substr(3, 3);\r\n                            let dailyChangeClass = currentTickerData.dailyChange < 0 ? 'lower' : 'higher';\r\n                            let dailyChangePercent = Math.abs(currentTickerData.dailyChange * 100);\r\n                            dailyChangePercent = Math.round(dailyChangePercent * 100) / 100;\r\n                            return (\r\n                                <div key={pair} className=\"ticker-data-wrapper\">\r\n                                    <div className=\"ticker-data-row\">{coin}</div>\r\n                                    <div className=\"ticker-data-row\">{currentTickerData.lastPrice} <span className=\"ticker-currency\">{currency}</span></div>\r\n                                    <div className={`ticker-data-row ${dailyChangeClass}`}>{dailyChangePercent + '%'}</div>\r\n                                    <div className=\"ticker-data-row\">{Math.round(currentTickerData.volume)}</div>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </React.Fragment>\r\n            );\r\n        }\r\n\r\n        return 'Loading Tickers...';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tickers\">\r\n                <h3 className=\"tickers-title\">TICKERS</h3>\r\n                {this.getTickers()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTicker.propTypes = {\r\n    tickersData: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tickersData: state.tickerReducer.get('tickersData').toJS()\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(Ticker);","export function generateTickerSubscribeMsg(pair) {\r\n    return JSON.stringify({\r\n        event: 'subscribe',\r\n        channel: 'ticker',\r\n        symbol: `t${pair}`\r\n    });\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './OrderBook.css';\r\n\r\nclass OrderBook extends Component {\r\n  componentDidMount() {\r\n    const { webSocket } = this.props;\r\n\r\n    let msg = JSON.stringify({\r\n      event: 'subscribe',\r\n      channel: 'book',\r\n      symbol: 'tBTCUSD',\r\n      prec: 'P0',\r\n      freq: 'F0'\r\n    });\r\n\r\n    webSocket.addEventListener('open', () => webSocket.send(msg));\r\n  }\r\n\r\n  getBids() {\r\n    if (this.props.orderBookData.bids.length > 0) {\r\n      return (\r\n        <div className=\"order-book-list\">\r\n          <div>\r\n            <div className=\"order-book-col\">COUNT</div>\r\n            <div className=\"order-book-col\">AMOUNT</div>\r\n            <div className=\"order-book-col\">PRICE</div>\r\n          </div>\r\n          {\r\n            this.props.orderBookData.bids.map((el, index) => {\r\n              return (\r\n                <div key={index} className=\"order-book-row\">\r\n                  <div className=\"order-book-col\">{el.count}</div>\r\n                  <div className=\"order-book-col\">{el.amount}</div>\r\n                  <div className=\"order-book-col\">{el.price}</div>\r\n                </div>\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div className=\"loading-order-book\">Loading Bids...</div>;\r\n  }\r\n\r\n  getAsks() {\r\n    if (this.props.orderBookData.asks.length > 0) {\r\n      return (\r\n        <div className=\"order-book-list\">\r\n          <div>\r\n            <div className=\"order-book-col\">PRICE</div>\r\n            <div className=\"order-book-col\">AMOUNT</div>\r\n            <div className=\"order-book-col\">COUNT</div>\r\n          </div>\r\n          {\r\n            this.props.orderBookData.asks.map((el, index) => {\r\n              return (\r\n                <div key={index} className=\"order-book-row\">\r\n                  <div className=\"order-book-col\">{el.price}</div>\r\n                  <div className=\"order-book-col\">{Math.abs(el.amount)}</div>\r\n                  <div className=\"order-book-col\">{el.count}</div>\r\n                </div>\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return <div  className=\"loading-order-book\">Loading Asks...</div>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"order-book\">\r\n        <h3 className=\"order-book-title\">Order Book - BTC/USD</h3>\r\n        {this.getBids()}\r\n        {this.getAsks()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nOrderBook.propTypes = {\r\n  orderBookData: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    orderBookData: state.orderBookReducer.get('orderBookData').toJS()\r\n  };\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n)(OrderBook);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport './Trade.css';\r\n\r\nclass Trade extends Component {\r\n    componentDidMount() {\r\n        const { webSocket } = this.props;\r\n\r\n        let msg = JSON.stringify({\r\n            event: 'subscribe',\r\n            channel: 'trades',\r\n            symbol: 'tBTCUSD'\r\n        });\r\n\r\n        webSocket.addEventListener('open', () => webSocket.send(msg));\r\n    }\r\n\r\n    getTrades() {\r\n        if (this.props.tradesData.length > 0) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div>\r\n                        <div className=\"trades-col\">TIME</div>\r\n                        <div className=\"trades-col\">PRICE</div>\r\n                        <div className=\"trades-col\">AMOUNT</div>\r\n                    </div>\r\n                    {\r\n                        this.props.tradesData.map(tr => {\r\n                            let tradeTime = new Date(tr.milliseconds);\r\n                            let utcTradeTime = new Date(tradeTime.getTime() + tradeTime.getTimezoneOffset() * 60000);\r\n                            let seconds = utcTradeTime.getSeconds();\r\n                            let minutes = utcTradeTime.getMinutes();\r\n                            let hour = utcTradeTime.getHours();\r\n                            seconds < 10 && (seconds = '0' + seconds);\r\n                            minutes < 10 && (minutes = '0' + minutes);\r\n                            hour < 10 && (hour = '0' + hour);\r\n                            let amountRowClass = tr.amount < 0 ? 'minus-trade' : 'plus-trade';\r\n                            let amountToDisplay = Math.abs(Math.round(tr.amount * 10000) / 10000);\r\n\r\n                            return (\r\n                                <div key={tr.id} className={amountRowClass}>\r\n                                    <div className=\"trades-col\">{`${hour}:${minutes}:${seconds}`}</div>\r\n                                    <div className=\"trades-col\">{tr.price.toFixed(1)}</div>\r\n                                    <div className=\"trades-col\">{amountToDisplay.toFixed(4)}</div>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </React.Fragment>\r\n            );\r\n        }\r\n\r\n        return 'Loading Trades...';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"trades\">\r\n                <h3 className=\"trades-title\">TRADES BTC/USD</h3>\r\n                {this.getTrades()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTrade.propTypes = {\r\n    tradesData: PropTypes.array\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tradesData: state.tradeReducer.get('tradesData').toJS()\r\n    };\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         setChannelInfo: data => dispatch(setChannelInfo(data)),\r\n//         settradesData: data => dispatch(settradesData(data))\r\n//     }\r\n// };\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    // mapDispatchToProps\r\n)(Trade);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Ticker from './components/Ticker/Ticker';\r\nimport OrderBook from './components/OrderBook/OrderBook';\r\nimport Trade from './components/Trade/Trade';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\n\r\nimport {\r\n  setChannelInfo\r\n} from './actions/appActions';\r\n\r\nimport {\r\n  setTickerData\r\n} from './actions/tickerActions';\r\n\r\nimport {\r\n  setOrderBookData,\r\n  updateOrderBookData,\r\n  removeOrderBookData\r\n} from './actions/orderBookActions';\r\n\r\nimport {\r\n  setTradeData,\r\n  updateTradeData\r\n} from './actions/tradeActions';\r\n\r\nconst webSocket = new WebSocket('wss://api.bitfinex.com/ws/2');\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    webSocket.addEventListener('message', (msg) => {\r\n      let data = JSON.parse(msg.data);\r\n\r\n      if (data && data.event && data.event === 'subscribed' && data.chanId && data.channel) {\r\n        this.props.setChannelInfo({\r\n          chanId: data.chanId,\r\n          channelInfo: {\r\n            pair: data.pair,\r\n            type: data.channel\r\n          }\r\n        });\r\n      } else if (Array.isArray(data) && data.length === 2 && data[1] !== 'hb') {\r\n        const currentChannelId = data[0];\r\n        const mainData = data[1];\r\n        let currentChannel = this.props.channelsInfo[currentChannelId];\r\n\r\n        if (currentChannel) {\r\n          switch (currentChannel.type) {\r\n            case 'ticker':\r\n              this.props.setTickerData({\r\n                pair: currentChannel.pair,\r\n                tickerInfo: {\r\n                  lastPrice: mainData[6],\r\n                  dailyChange: mainData[5],\r\n                  volume: mainData[7]\r\n                }\r\n              });\r\n              break;\r\n            case 'book':\r\n              // Setting the snapshot order book data\r\n              if (mainData.length === 50) {\r\n                let initialData = { bids: [], asks: [] };\r\n                for (let i = 0; i < mainData.length; i++) {\r\n                  const currentBookData = mainData[i];\r\n                  const price = Math.round(currentBookData[0] * 100) / 100;\r\n                  const count = currentBookData[1];\r\n                  const amount = currentBookData[2];\r\n\r\n                  if (count > 0) {\r\n                    amount > 0 && initialData.bids.push({ price, count, amount });\r\n                    amount < 0 && initialData.asks.push({ price, count, amount });\r\n                  }\r\n                }\r\n\r\n                this.props.setOrderBookData(initialData);\r\n              } else if (mainData.length === 3) { // Updating existing order book data\r\n                const price = Math.round(mainData[0] * 100) / 100;\r\n                const count = mainData[1];\r\n                const amount = mainData[2];\r\n\r\n                if (count > 0) {\r\n                  if (amount !== 0) {\r\n                    let updatedPart = 'bids';\r\n                    amount < 0 && (updatedPart = 'asks');\r\n                    this.props.updateOrderBookData({ updatedPart, updatedData: { price, count, amount } });\r\n                  } else if (count === 0 && (amount === 1 || amount === -1)) {\r\n                    let partToRemoveFrom = 'bids';\r\n                    amount === -1 && (partToRemoveFrom = 'asks');\r\n                    this.props.removeOrderBookData({ partToRemoveFrom, removedPrice: price });\r\n                  }\r\n                }\r\n              }\r\n              break;\r\n            case 'trades':\r\n              let trades = [];\r\n\r\n              for (let i = 0; i < mainData.length; i++) {\r\n                const currentTrade = mainData[i];\r\n\r\n                trades.push({\r\n                  id: currentTrade[0],\r\n                  milliseconds: currentTrade[1],\r\n                  amount: currentTrade[2],\r\n                  price: Math.round(currentTrade[3] * 10) / 10\r\n                });\r\n\r\n              }\r\n              this.props.setTradeData(trades);\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n      } else if (Array.isArray(data) && data.length === 3) { // Update Trades\r\n        const msgType = data[1];\r\n        const tradeData = data[2];\r\n\r\n        if (msgType === 'tu') {\r\n          this.props.updateTradeData({\r\n            id: tradeData[0],\r\n            milliseconds: tradeData[1],\r\n            amount: tradeData[2],\r\n            price: Math.round(tradeData[3] * 10) / 10\r\n          });\r\n        }\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Ticker webSocket={webSocket} />\r\n        <Trade webSocket={webSocket} />\r\n        <OrderBook webSocket={webSocket} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  channelsInfo: PropTypes.object,\r\n  setChannelInfo: PropTypes.func,\r\n  setTickerData: PropTypes.func,\r\n  setOrderBookData: PropTypes.func,\r\n  updateOrderBookData: PropTypes.func,\r\n  removeOrderBookData: PropTypes.func,\r\n  setTradeData: PropTypes.func,\r\n  updateTradeData: PropTypes.func\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    channelsInfo: state.appReducer.get('channelsInfo').toJS()\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    setChannelInfo: data => dispatch(setChannelInfo(data)),\r\n    setTickerData: data => dispatch(setTickerData(data)),\r\n    setOrderBookData: data => dispatch(setOrderBookData(data)),\r\n    updateOrderBookData: data => dispatch(updateOrderBookData(data)),\r\n    removeOrderBookData: data => dispatch(removeOrderBookData(data)),\r\n    setTradeData: data => dispatch(setTradeData(data)),\r\n    updateTradeData: data => dispatch(updateTradeData(data))\r\n  }\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import { SET_CHANNEL_INFO } from '../actionTypes';\r\n\r\nexport const setChannelInfo = (data) => ({\r\n    type: SET_CHANNEL_INFO,\r\n    data\r\n});","export const SET_CHANNEL_INFO = 'SET_CHANNEL_INFO';\r\nexport const SET_TICKER_DATA = 'SET_TICKER_DATA';\r\nexport const SET_ORDER_BOOK_DATA = 'SET_ORDER_BOOK_DATA';\r\nexport const UPDATE_ORDER_BOOK_DATA = 'UPDATE_ORDER_BOOK_DATA';\r\nexport const REMOVE_ORDER_BOOK_DATA = 'REMOVE_ORDER_BOOK_DATA';\r\nexport const SET_TRADE_DATA = 'SET_TRADE_DATA';\r\nexport const UPDATE_TRADE_DATA = 'UPDATE_TRADE_DATA';\r\n","import { SET_TICKER_DATA } from '../actionTypes';\r\n\r\nexport const setTickerData = (data) => ({\r\n    type: SET_TICKER_DATA,\r\n    data\r\n});","import { SET_ORDER_BOOK_DATA, UPDATE_ORDER_BOOK_DATA, REMOVE_ORDER_BOOK_DATA } from '../actionTypes';\r\n\r\nexport const setOrderBookData = (data) => ({\r\n    type: SET_ORDER_BOOK_DATA,\r\n    data\r\n});\r\n\r\nexport const updateOrderBookData = (data) => ({\r\n    type: UPDATE_ORDER_BOOK_DATA,\r\n    data\r\n});\r\n\r\nexport const removeOrderBookData = (data) => ({\r\n    type: REMOVE_ORDER_BOOK_DATA,\r\n    data\r\n});\r\n","import { SET_TRADE_DATA, UPDATE_TRADE_DATA } from '../actionTypes';\r\n\r\nexport const setTradeData = (data) => ({\r\n    type: SET_TRADE_DATA,\r\n    data\r\n});\r\n\r\nexport const updateTradeData = (data) => ({\r\n    type: UPDATE_TRADE_DATA,\r\n    data\r\n});","import { fromJS } from 'immutable';\r\nimport { SET_CHANNEL_INFO } from '../actionTypes';\r\n\r\nconst initialState = fromJS({\r\n    channelsInfo: {}\r\n});\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_CHANNEL_INFO: {\r\n            const { chanId, channelInfo } = action.data;\r\n            return state.setIn(['channelsInfo', chanId], channelInfo);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { fromJS } from 'immutable';\r\nimport { SET_TICKER_DATA } from '../actionTypes';\r\n\r\nconst initialState = fromJS({\r\n    tickersData: {}\r\n});\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TICKER_DATA: {\r\n            const { pair, tickerInfo } = action.data;\r\n            return state.setIn(['tickersData', pair], tickerInfo);\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { fromJS } from 'immutable';\r\nimport { SET_ORDER_BOOK_DATA, UPDATE_ORDER_BOOK_DATA, REMOVE_ORDER_BOOK_DATA } from '../actionTypes';\r\n\r\nconst initialState = fromJS({\r\n    orderBookData: {\r\n        bids: [],\r\n        asks: []\r\n    }\r\n});\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_ORDER_BOOK_DATA: {\r\n            return state\r\n                .setIn(['orderBookData', 'bids'], fromJS([].concat(action.data.bids)))\r\n                .setIn(['orderBookData', 'asks'], fromJS([].concat(action.data.asks)));\r\n        }\r\n        case UPDATE_ORDER_BOOK_DATA: {\r\n            const { updatedPart, updatedData } = action.data;\r\n            const updatedPrice = updatedData.price;\r\n            let orderBookData = state.get('orderBookData').toJS();\r\n            let newOrderBookData = { ...orderBookData };\r\n\r\n            let currentData = newOrderBookData[updatedPart];\r\n            let existingPriceIndex = currentData.findIndex(el => el.price === updatedPrice);\r\n\r\n            if (existingPriceIndex !== -1) {\r\n                currentData[existingPriceIndex] = Object.assign(currentData[existingPriceIndex], updatedData);\r\n            } else if (currentData.length < 25) {\r\n                currentData.push(updatedData);\r\n            } else if (currentData.length === 25) {\r\n                currentData.pop();\r\n                currentData.push(updatedData);\r\n            }\r\n\r\n            if (updatedPart === 'bids') {\r\n                currentData.sort((a, b) => b.price - a.price); // For descending sort\r\n            } else {\r\n                currentData.sort((a, b) => a.price - b.price); // For descending sort\r\n            }\r\n\r\n            return state.set('orderBookData', fromJS(newOrderBookData));\r\n        }\r\n        case REMOVE_ORDER_BOOK_DATA: {\r\n            const { partToRemoveFrom, removedPrice } = action.data;\r\n            let orderBookData = state.get('orderBookData').toJS();\r\n            let newOrderBookData = { ...orderBookData };\r\n\r\n            let currentData = newOrderBookData[partToRemoveFrom];\r\n            let existingPriceIndex = currentData.findIndex(el => el.price === removedPrice);\r\n            let newData = [...currentData];\r\n\r\n            existingPriceIndex !== -1 && newData.splice(existingPriceIndex, 1);\r\n\r\n            return state.set('orderBookData', fromJS(newOrderBookData));\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { fromJS } from 'immutable';\r\nimport { SET_TRADE_DATA, UPDATE_TRADE_DATA } from '../actionTypes';\r\n\r\nconst initialState = fromJS({\r\n    tradesData: []\r\n});\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TRADE_DATA: {\r\n            return state.set('tradesData', fromJS([].concat(action.data)));\r\n        }\r\n        case UPDATE_TRADE_DATA: {\r\n            let currentTradesData = state.get('tradesData').toJS();\r\n            let newTradesData = [...currentTradesData];\r\n            let existingTradeIndex = newTradesData.findIndex(tr => tr.id === action.data.id);\r\n\r\n            if (existingTradeIndex !== -1) {\r\n                newTradesData[existingTradeIndex] = Object.assign(newTradesData[existingTradeIndex], action.data);\r\n            } else if (currentTradesData.length === 30) {\r\n                newTradesData.pop();\r\n                newTradesData.push(action.data);\r\n            }\r\n\r\n            newTradesData.sort((a, b) => b.milliseconds - a.milliseconds);\r\n\r\n            return state.set('tradesData', fromJS(newTradesData));\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport appReducer from './reducers/appReducer';\r\nimport tickerReducer from './reducers/tickerReducer';\r\nimport orderBookReducer from './reducers/orderBookReducer';\r\nimport tradeReducer from './reducers/tradeReducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst reducers = combineReducers({\r\n    appReducer,\r\n    tickerReducer,\r\n    orderBookReducer,\r\n    tradeReducer\r\n});\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}